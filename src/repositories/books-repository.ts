import {ObjectId} from "mongodb";
import {booksCollection} from "../index";

export type BookType={
    _id?: ObjectId,
    volume: string
}

export const booksRepository={

    // async  getBooksMongoDB():Promise<BookType[]> {
    //           return await  booksCollection.find().toArray();
    // },


    //   async  getBooksMongoDB(order: 'asc' | 'desc' = 'asc'):Promise<BookType[]> {
    //       const books = await booksCollection.find().toArray();
    //       const sorted = books.sort((a, b) => {
    //           const getNumber = (v: string) => parseInt(v.replace(/[^\d]/g, '')) || 0;
    //           return order === 'asc'
    //               ? getNumber(a.volume) - getNumber(b.volume)
    //               : getNumber(b.volume) - getNumber(a.volume);
    //       });
    //       return sorted;
    // },

        async getBooksMongoDB(order: 'asc' | 'desc' = 'asc'): Promise<BookType[]> {
            const sortDirection = order === 'asc' ? 1 : -1;

            //–°–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–µ –ø–æ–ª–µ volumeNumber, –¥–µ–ª–∏–º —Å—Ç—Ä–æ–∫—É "Book-11" –Ω–∞ –º–∞—Å—Å–∏–≤ ["Book", "11"]
            const pipeline = [
                {
                    $addFields: {
                        volumeNumber: {
                            $toInt: {
                                $arrayElemAt: [
                                    { $split: ["$volume", "-"] },
                                    1
                                ]
                            }
                        }
                    }
                },

                // –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã –ø–æ –Ω–æ–≤–æ–º—É —á–∏—Å–ª–æ–≤–æ–º—É –ø–æ–ª—é volumeNumber –≤ –Ω—É–∂–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ (asc –∏–ª–∏ desc).
                {
                    $sort: { volumeNumber: sortDirection }
                },
                // –û—á–∏—â–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç, —É–¥–∞–ª—è—è volumeNumber, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–æ—Å—å —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏.
                {
                    $project: {
                        _id: 1,
                        volume: 1
                    }
                }
            ];

            // üëá –ü—Ä–∏–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫ —Ç–∏–ø—É BookType[]
            return await booksCollection.aggregate(pipeline).toArray() as BookType[];
        },

    async postBooksMongoDB(newBook:BookType):Promise<BookType>  {
          const result = await booksCollection.insertOne(newBook);
        const insertedBook = await booksCollection.findOne({ _id: result.insertedId });
        if (!insertedBook) {
            throw new Error("–û—à–∏–±–∫–∞: –¥–æ–∫—É–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ –≤—Å—Ç–∞–≤–∫–∏");
        }
        return insertedBook;
    },

   async deleteBooksMongoDB( id: string):Promise<BookType[] |undefined>  {
       const result = await booksCollection.deleteOne({ _id: new ObjectId(id) });
       if (result.deletedCount === 0) {
           throw new Error("–ö–Ω–∏–≥–∞ —Å —Ç–∞–∫–∏–º _id –Ω–µ –Ω–∞–π–¥–µ–Ω–∞");
       }
       return await booksCollection.find().toArray();
   }
}